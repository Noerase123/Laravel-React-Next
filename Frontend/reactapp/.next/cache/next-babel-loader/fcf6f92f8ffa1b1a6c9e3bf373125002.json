{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from 'next/link';\nimport React from 'react';\nimport clsx from 'clsx';\nimport { createStyles, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport ApartmentIcon from '@material-ui/icons/Apartment';\nimport HotelIcon from '@material-ui/icons/Hotel';\nimport GroupIcon from '@material-ui/icons/Group';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport { DEFAULT_COLOR } from '../../defaults/default';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst drawerWidth = 250;\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex'\n  },\n  nested: {\n    paddingLeft: theme.spacing(4)\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: 36\n  },\n  hide: {\n    display: 'none'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap'\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1\n    }\n  },\n  toolbar: _objectSpread({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1)\n  }, theme.mixins.toolbar),\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff'\n  }\n}));\nexport default function NavDrawer(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(true);\n  const [openRoom, setOpenRoom] = React.useState(false);\n  const [openReport, setOpenReport] = React.useState(false);\n  const [openBackDrop, setOpenBackDrop] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleClickRoom = () => {\n    setOpenRoom(!openRoom);\n  };\n\n  const handleClickReport = () => {\n    setOpenReport(!openReport);\n  };\n\n  const handleCloseDrop = () => {\n    setOpenBackDrop(false);\n  };\n\n  const backDrop = () => {\n    return __jsx(\"div\", null, __jsx(Backdrop, {\n      className: classes.backdrop,\n      open: openBackDrop,\n      onClick: handleCloseDrop\n    }, __jsx(CircularProgress, {\n      color: \"inherit\"\n    })));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, backDrop, __jsx(CssBaseline, null), __jsx(AppBar, {\n    style: {\n      backgroundColor: DEFAULT_COLOR\n    },\n    position: \"fixed\",\n    className: clsx(classes.appBar, {\n      [classes.appBarShift]: open\n    })\n  }, __jsx(Toolbar, null, __jsx(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"open drawer\",\n    onClick: handleDrawerOpen,\n    edge: \"start\",\n    className: clsx(classes.menuButton, {\n      [classes.hide]: open\n    })\n  }, __jsx(MenuIcon, null)), __jsx(Typography, {\n    variant: \"h6\",\n    noWrap: true\n  }, props.title))), __jsx(Drawer, {\n    variant: \"permanent\",\n    className: clsx(classes.drawer, {\n      [classes.drawerOpen]: open,\n      [classes.drawerClose]: !open\n    }),\n    classes: {\n      paper: clsx({\n        [classes.drawerOpen]: open,\n        [classes.drawerClose]: !open\n      })\n    }\n  }, __jsx(\"div\", {\n    className: classes.toolbar\n  }, __jsx(IconButton, {\n    onClick: handleDrawerClose\n  }, theme.direction === 'rtl' ? __jsx(ChevronRightIcon, null) : __jsx(ChevronLeftIcon, null))), __jsx(Divider, null), __jsx(List, null, __jsx(Link, {\n    href: pages.dashboard\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(DashboardIcon, null)), __jsx(ListItemText, {\n    primary: \"Dashboard\"\n  }))), __jsx(Link, {\n    href: pages.register\n  }, __jsx(ListItem, {\n    button: true\n  }, __jsx(ListItemIcon, null, __jsx(PersonAddIcon, null)), __jsx(ListItemText, {\n    primary: \"Register\"\n  }))), __jsx(ListItem, {\n    button: true,\n    onClick: handleClickRoom\n  }, __jsx(ListItemIcon, null, __jsx(HomeIcon, null)), __jsx(ListItemText, {\n    primary: \"Rooms\"\n  }), openRoom ? __jsx(ExpandLess, null) : __jsx(ExpandMore, null)), __jsx(Collapse, {\n    in: openRoom,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.buildings\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(ApartmentIcon, null)), __jsx(ListItemText, {\n    primary: \"Buildings\"\n  })))), __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.units\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(HomeIcon, null)), __jsx(ListItemText, {\n    primary: \"Units\"\n  })))), __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.beds\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(HotelIcon, null)), __jsx(ListItemText, {\n    primary: \"Beds\"\n  }))))), __jsx(ListItem, {\n    button: true,\n    onClick: handleClickReport\n  }, __jsx(ListItemIcon, null, __jsx(AssessmentIcon, null)), __jsx(ListItemText, {\n    primary: \"Generate Reports\"\n  }), openReport ? __jsx(ExpandLess, null) : __jsx(ExpandMore, null)), __jsx(Collapse, {\n    in: openReport,\n    timeout: \"auto\",\n    unmountOnExit: true\n  }, __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.tenantReports\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(GroupIcon, null)), __jsx(ListItemText, {\n    primary: \"Tenants\"\n  })))), __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.roomsReports\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(HotelIcon, null)), __jsx(ListItemText, {\n    primary: \"Rooms\"\n  })))), __jsx(List, {\n    component: \"div\",\n    disablePadding: true\n  }, __jsx(Link, {\n    href: pages.utilityReports\n  }, __jsx(ListItem, {\n    button: true,\n    className: classes.nested\n  }, __jsx(ListItemIcon, null, __jsx(FlashOnIcon, null)), __jsx(ListItemText, {\n    primary: \"Utilities\"\n  })))))), __jsx(Divider, null), __jsx(List, null, ['All mail', 'Trash', 'Spam'].map((text, index) => __jsx(ListItem, {\n    button: true,\n    key: text\n  }, __jsx(ListItemIcon, null, __jsx(MailIcon, null)), __jsx(ListItemText, {\n    primary: text\n  }))))), __jsx(\"main\", {\n    className: classes.content\n  }, __jsx(\"div\", {\n    className: classes.toolbar\n  }), props.children));\n}\nconst pages = {\n  dashboard: '/',\n  register: '/register/',\n  tenantReports: '/tenantReports/',\n  roomsReports: '/roomReports/',\n  utilityReports: '/utilityReports/',\n  buildings: '/buildings/',\n  units: '/units/',\n  beds: '/beds/'\n};","map":null,"metadata":{},"sourceType":"module"}