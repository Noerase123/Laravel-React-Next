{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport TenantDetails from './tenants/tenantDetails';\nimport ContractDetails from './tenants/contractDetails';\n\nfunction TabPanel(props) {\n  const {\n    children,\n    value,\n    index\n  } = props,\n        other = _objectWithoutProperties(props, [\"children\", \"value\", \"index\"]);\n\n  return __jsx(\"div\", _extends({\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `full-width-tabpanel-${index}`,\n    \"aria-labelledby\": `full-width-tab-${index}`\n  }, other), value === index && __jsx(Box, {\n    p: 3\n  }, __jsx(Typography, null, children)));\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `full-width-tab-${index}`,\n    'aria-controls': `full-width-tabpanel-${index}`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function UnitView(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleChangeIndex = index => {\n    setValue(index);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(AppBar, {\n    position: \"static\",\n    color: \"default\"\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    textColor: \"primary\",\n    variant: \"fullWidth\",\n    \"aria-label\": \"full width tabs example\"\n  }, __jsx(Tab, _extends({\n    label: \"Tenants\"\n  }, a11yProps(0))), __jsx(Tab, _extends({\n    label: \"Contracts\"\n  }, a11yProps(1))), __jsx(Tab, _extends({\n    label: \"Utilities\"\n  }, a11yProps(2))))), __jsx(SwipeableViews, {\n    axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',\n    index: value,\n    onChangeIndex: handleChangeIndex\n  }, __jsx(TabPanel, {\n    value: value,\n    index: 0,\n    dir: theme.direction\n  }, __jsx(TenantDetails, {\n    tenants: props.tenantData\n  })), __jsx(TabPanel, {\n    value: value,\n    index: 1,\n    dir: theme.direction\n  }, __jsx(ContractDetails, {\n    tenants: props.tenantData\n  })), __jsx(TabPanel, {\n    value: value,\n    index: 2,\n    dir: theme.direction\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}