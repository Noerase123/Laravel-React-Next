{"ast":null,"code":"var _jsxFileName = \"/home/isaac/Desktop/PHP PROJECTS/Laravel-React-Next/Frontend/reactapp/src/components/table.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Buttons from '../components/Buttons';\nimport Typography from '@material-ui/core/Typography'; // interface Column {\n//   id: number;\n//   label: string;\n//   minWidth?: number;\n//   align?: 'right';\n//   format?: (value: number) => string;\n// }\n// const columns: Column[] = [\n//   { id: 1, label: 'Name', minWidth: 170 },\n//   { id: 2, label: 'Type', minWidth: 100 },\n//   {\n//     id: 3,\n//     label: 'Capacity',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toLocaleString('en-US'),\n//   },\n//   {\n//     id: 4,\n//     label: 'Vacancy',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toLocaleString('en-US'),\n//   },\n//   {\n//     id: 5,\n//     label: 'Occupancy',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toFixed(2),\n//   },\n// ];\n// function createData(name: string, type: string, capacity: number, vacancy: number, occupancy: number): IBuilding {\n//   return { name, type, capacity, vacancy, occupancy };\n// }\n// const rows = [\n//   createData('Amsterdam','First Class', 100,30,70),\n//   createData('Athens','Deluxe', 100,30,70),\n//   createData('Hong Kong','Deluxe', 100,30,70),\n//   createData('Rio','Deluxe', 100,30,70),\n//   createData('Paris','Deluxe', 100,30,70),\n//   createData('Sydney','First Class', 100,30,70),\n//   createData('Auckland','First Class', 100,30,70),\n//   createData('Seoul','Deluxe', 100,30,70),\n//   createData('Tokyo','Deluxe', 100,30,70),\n//   createData('Kyoto','Deluxe', 100,30,70),\n//   createData('New York','First Class', 100,30,70),\n//   createData('Singapore','Deluxe', 100,30,70),\n//   createData('London','Deluxe', 100,30,70),\n// ];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    minHeight: 600\n  }\n});\nexport default function table(props) {\n  _s();\n\n  const {\n    title,\n    columns,\n    rows\n  } = props;\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, props.title), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), __jsx(Buttons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), __jsx(Paper, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, props.columns.map(column => __jsx(TableCell, {\n    key: column.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 19\n    }\n  }, column.label)))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, props.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: row.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 19\n      }\n    }, props.columns.map(column => {\n      const value = row[column.id];\n      return __jsx(TableCell, {\n        key: column.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, column.format && typeof value === 'number' ? column.format(value) : value);\n    }));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: props.rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(table, \"1LSjuq2DZUwZxE9BYIdgLLfYYP4=\", false, function () {\n  return [useStyles];\n});","map":{"version":3,"sources":["/home/isaac/Desktop/PHP PROJECTS/Laravel-React-Next/Frontend/reactapp/src/components/table.tsx"],"names":["React","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","Buttons","Typography","useStyles","root","width","container","minHeight","table","props","title","columns","rows","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","map","column","id","label","slice","row","name","format","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport {IBuilding, IColumn} from '../interface/Interfaces'\nimport Buttons from '../components/Buttons'\nimport Typography from '@material-ui/core/Typography'\n\n// interface Column {\n  \n//   id: number;\n//   label: string;\n//   minWidth?: number;\n//   align?: 'right';\n//   format?: (value: number) => string;\n// }\n\n// const columns: Column[] = [\n//   { id: 1, label: 'Name', minWidth: 170 },\n//   { id: 2, label: 'Type', minWidth: 100 },\n//   {\n//     id: 3,\n//     label: 'Capacity',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toLocaleString('en-US'),\n//   },\n//   {\n//     id: 4,\n//     label: 'Vacancy',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toLocaleString('en-US'),\n//   },\n//   {\n//     id: 5,\n//     label: 'Occupancy',\n//     minWidth: 170,\n//     align: 'right',\n//     format: (value: number) => value.toFixed(2),\n//   },\n// ];\n\n// function createData(name: string, type: string, capacity: number, vacancy: number, occupancy: number): IBuilding {\n//   return { name, type, capacity, vacancy, occupancy };\n// }\n\n// const rows = [\n//   createData('Amsterdam','First Class', 100,30,70),\n//   createData('Athens','Deluxe', 100,30,70),\n//   createData('Hong Kong','Deluxe', 100,30,70),\n//   createData('Rio','Deluxe', 100,30,70),\n//   createData('Paris','Deluxe', 100,30,70),\n//   createData('Sydney','First Class', 100,30,70),\n//   createData('Auckland','First Class', 100,30,70),\n//   createData('Seoul','Deluxe', 100,30,70),\n//   createData('Tokyo','Deluxe', 100,30,70),\n//   createData('Kyoto','Deluxe', 100,30,70),\n//   createData('New York','First Class', 100,30,70),\n//   createData('Singapore','Deluxe', 100,30,70),\n//   createData('London','Deluxe', 100,30,70),\n// ];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    minHeight: 600,\n  },\n});\n\ninterface ITable {\n  title: string\n  columns: IColumn[]\n  rows: IColumn[]\n}\n\nexport default function table(props: ITable) {\n\n  const {title, columns, rows } = props\n\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h5\" gutterBottom>\n          {props.title}\n      </Typography>\n      <br/>\n      <Buttons/>\n      <br/>\n      <Paper className={classes.root}>\n        <TableContainer className={classes.container}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {props.columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.name}>\n                    {props.columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id}>\n                          {column.format && typeof value === 'number' ? column.format(value) : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={props.rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>  \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}